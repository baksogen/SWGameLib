////  SWPacket.m//  SWGameLib////  Copyright (c) 2010 Sangwoo Im////  Permission is hereby granted, free of charge, to any person obtaining a copy//  of this software and associated documentation files (the "Software"), to deal//  in the Software without restriction, including without limitation the rights//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell//  copies of the Software, and to permit persons to whom the Software is//  furnished to do so, subject to the following conditions:////  The above copyright notice and this permission notice shall be included in//  all copies or substantial portions of the Software.////  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN//  THE SOFTWARE.//  ////  Created by Sangwoo Im on 9/27/10.//  Copyright 2010 Sangwoo Im. All rights reserved.//#import "SWPacket.h"@interface SWPacket ()@property (nonatomic, retain) NSData *userData;@end@implementation SWPacket@dynamic    length;@synthesize type     = _type;@synthesize userData = _userData;-(id)init {    if ((self = [super init])) {        _userData = nil;    }    return self;}-(id)initWithData:(NSData *)data {    if ((self = [super init])) {        memcpy(&_type, [data bytes], sizeof(NetMessageType));        self.userData = [NSData dataWithBytes:[data bytes]+sizeof(NetMessageType)                                       length:[data length]-sizeof(NetMessageType)];    }    return self;}-(NSUInteger)length {    return sizeof(NSUInteger) + sizeof(NetMessageType) + [_userData length];}-(NSData *)packet {    NSMutableData *data;    NSUInteger    len;        len  = [self length];    data = [NSMutableData dataWithBytes:&len length:sizeof(NSUInteger)];    [data appendBytes:&_type length:sizeof(NetMessageType)];    if (_userData) {        [data appendData:_userData];    }    return data;}@end@implementation SWPacketString@dynamic string;-(NSString *)string {    if (self.userData) {        return [NSString stringWithCString:[self.userData bytes] encoding:NSUTF8StringEncoding];    }    return nil;}-(void)setString:(NSString *)n {    self.userData = [NSData dataWithBytes:[n cStringUsingEncoding:NSUTF8StringEncoding] length:[n length]+2];}@end@implementation SWPacketObjectDespawn@dynamic objectID;-(NSUInteger)objectID {    if (self.userData) {        NSUInteger r;                memcpy(&r, [self.userData bytes], sizeof(NSUInteger));        return r;    }    return NSUIntegerMax;}-(void)setObjectID:(NSUInteger)i {    self.userData = [NSData dataWithBytes:&i length:sizeof(NSUInteger)];}@end@implementation SWPacketObjectSpawn@dynamic    templateKey;@synthesize position = _position;@synthesize objectID = _objectID;-(id)initWithData:(NSData *)data {    if ((self = [super initWithData:data])) {        self.userData = [NSData dataWithBytes:[data bytes]                                       length:[data length]-sizeof(NSUInteger)-sizeof(CGPoint)];        memcpy(&_objectID, [data bytes]+[_userData length], sizeof(NSUInteger));        memcpy(&_position, [data bytes]+[_userData length]+sizeof(NSUInteger), sizeof(CGPoint));    }    return self;}-(void)setTemplateKey:(NSString *)k {    self.userData = [NSData dataWithBytes:[k cStringUsingEncoding:NSUTF8StringEncoding] length:[k length]+2];}-(NSString *)templateKey {    if (self.userData) {        return [NSString stringWithCString:[self.userData bytes] encoding:NSUTF8StringEncoding];    }    return nil;}-(NSUInteger)length {    return [super length] + sizeof(NSUInteger) + sizeof(CGPoint);}-(NSData *)packet {    NSMutableData *data;        data = (NSMutableData *)[super packet];        [data appendBytes:&_objectID length:sizeof(NSUInteger)];    [data appendBytes:&_position length:sizeof(CGPoint)];        return data;}@end