////  SWLoadingScene.h//  SWGameLib//////  Copyright (c) 2010 Sangwoo Im////  Permission is hereby granted, free of charge, to any person obtaining a copy//  of this software and associated documentation files (the "Software"), to deal//  in the Software without restriction, including without limitation the rights//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell//  copies of the Software, and to permit persons to whom the Software is//  furnished to do so, subject to the following conditions:////  The above copyright notice and this permission notice shall be included in//  all copies or substantial portions of the Software.////  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN//  THE SOFTWARE.//  //  Created by Sangwoo Im on 4/14/10.//  Copyright 2010 Sangwoo Im. All rights reserved.//#import <Foundation/Foundation.h>#import "CCLayer.h"@class CCScene;/** * All scene class must conform to this protocol to be used by * SWLoadingScene class. */@protocol SWLoadableScene/** * Returns a CCScene object to load. * * You can wrap the scene to load with a CCTransitionScene object to provide * a transition. * * @return scene object. */+(CCScene *)sceneWithUserInfo:(id)data;@end@class CCScene, CCSprite, CCProgressTimer; /** * LoadingScene presents a loading image while the given class is loaded. * It also shows a progress bar. The loading progress is computed by counting * NSOperation objects in the designated operation queue. * * The class to be loaded needs to add their loading procedure into the queue. * * This has not been tested. This is to show a design pattern as a first draft. * */@interface SWLoadingScene :          CCLayer {@private    NSOperationQueue  *_opQueue;    CCScene           *_scene;    Class             _sceneToLoad;    CCSprite          *_loadingScreen;    CCProgressTimer   *_pBar;    NSUInteger        _total;    NSUInteger        _completed;    NSDictionary      *_info;}/** * progressBar */@property (nonatomic, assign, readonly) CCProgressTimer *timer;/** * Class to load */@property (nonatomic, assign)           Class   sceneToLoad;/** * scene that is loaded. Use this property iif you need to let this SWLoadingScene * object not to replace scene after the given class is initialized. For example, * if the class needs to do something else to be initialized after 'init' call is completed.  */@property (nonatomic, retain, readonly) CCScene *scene;/** * An auto-released scene object that is loading a given Class. * * @param info extra information to generate loading screen */+(id)sceneWithClassInfo:(NSDictionary *)info;/** * An scene object that is loading a given Class. * * @param info extra information to generate loading screen */-(id)initWithClassInfo:(NSDictionary *)info;/** * Returns a queue to handle scene loading. * @return queue */-(NSOperationQueue *)opQueue;/** * Updates Progress bar. Call this method every time you finish a part of your loading process */-(void)updateProgress;@end