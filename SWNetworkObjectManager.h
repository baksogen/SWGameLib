////  SWNetworkObjectManager.h//  SWGameLib////  Copyright (c) 2010 Sangwoo Im////  Permission is hereby granted, free of charge, to any person obtaining a copy//  of this software and associated documentation files (the "Software"), to deal//  in the Software without restriction, including without limitation the rights//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell//  copies of the Software, and to permit persons to whom the Software is//  furnished to do so, subject to the following conditions:////  The above copyright notice and this permission notice shall be included in//  all copies or substantial portions of the Software.////  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN//  THE SOFTWARE.//  ////  Created by Sangwoo Im on 9/7/10.//  Copyright 2010 Sangwoo Im. All rights reserved.//#import <Foundation/Foundation.h>#import "SWDefaultObjectManager.h"@class AsyncSocket, AsyncUdpSocket, SWNetworkObjectManager;@protocol SWNetworkEventHandler<          NSObject>@optional-(void)connectionReady:(SWNetworkObjectManager *)manager;-(void)connectionLost:(SWNetworkObjectManager *)manager;@end/** * This class extends SWDefaultObjectManager to provide * network capabilities. * * It will send/receive event messages via TCP. * It will send/receive object sync messages via UDP. * * It tries to hide network latency by smoothing out errors. *  * This class supports only single peer. * * You must use object templates. This class will exchange object info only by * object templates. See SWObjectTemplates.h * * Sending/receiving are done in main thread's run loop. * pre-/post-processing for network activities are done in a background thread. */@interface SWNetworkObjectManager :          SWDefaultObjectManager {@private    NSMutableArray        *_remoteObjects;    NSOperationQueue      *_netQueue;    NSInvocationOperation *_netOp;    AsyncSocket           *_tcp;    AsyncUdpSocket        *_udp;    NSString              *_connectedHost;    UInt16                _connectedPort;    NSUInteger            _pIdx, _rIdx;    id<SWNetworkEventHandler> _handler;}/** * connection event handler */@property (nonatomic, assign) id<SWNetworkEventHandler> handler;/** * Network queue */@property (nonatomic, retain, readonly) NSOperationQueue *netQueue;/** * Object sync'ing follow authority model.  * It only notifies its peer about the object state changes for the objects that * this manager owns. This is determined by this playerIdx. * * It ignores all changes made to other objects with different playerIdx. * i.e., neutral objects, opponent's objects (the opponent should notify these). * * For example, when establishing connection initially, assign 1 to the device * that sends challenge request, 2 to the device that accepts the challenge. */@property (nonatomic, assign, setter=setPlayerIdx:) NSUInteger playerIdx;/** * Initializes and autoreleases with a given tcp socket. *  * @param socket tcp socket. * @return autoreleased manager object. */+(id)managerWithAsyncSocket:(AsyncSocket *)socket;/** * Initializes with a given tcp socket. * * @param tcp tcp socket * @return initialized manager */-(id)initWithAsyncSocket:(AsyncSocket *)socket;/** * Returns an available port that is assigned by the operating system. * * @return the port number assigned. 0 if auto-assignment by the OS has failed. */+(UInt16)availablePort;@end