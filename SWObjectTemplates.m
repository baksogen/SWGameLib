////  SWEntityTemplate.m//  Block////  Created by Sangwoo Im on 4/13/10.//  Copyright 2010 Sangwoo Im. All rights reserved.//#import "SWObjectTemplates.h"#import "SWObject.h"#import "SimpleAudioEngine.h"#import "SWDebug.h"#import "CCSpriteFrame.h"#import "CCSpriteFrameCache.h"#import "CCSpriteBatchNode.h"#import "SWGameLib.h"@interface SWObjectTemplates()@property (nonatomic, assign) CCLayer             *_layer;@property (nonatomic, retain) NSMutableArray      *_preloadedSoundEffects;@property (nonatomic, retain) NSMutableDictionary *_entities;@property (nonatomic, retain) NSMutableDictionary *_installedSheets;-(void)_cleanup;-(NSDictionary *)_animationsWithDictionary:(NSDictionary *)animInfo;-(NSDictionary *)_soundEffectsWithDictionary:(NSDictionary *)sfxInfo;@end@implementation SWObjectTemplates@synthesize _layer;@synthesize _entities;@synthesize _preloadedSoundEffects;@synthesize _installedSheets;+(id)templateWithLayer:(CCLayer *)layer {    return [[[SWObjectTemplates alloc] initWithLayer:layer] autorelease];}-(id)initWithLayer:(CCLayer *)layer {    SWAssert(layer != nil, @"layer cannot be nil");        if ((self = [super init])) {        NSAutoreleasePool *pool;                pool        = [NSAutoreleasePool new];        self._layer = layer;        self._preloadedSoundEffects = [NSMutableArray array];        self._installedSheets       = [NSMutableDictionary dictionary];        self._entities              = [NSMutableDictionary dictionary];        [pool drain];    }    return self;}-(void)loadTemplateWithName:(NSString *)name {    CCSpriteBatchNode   *sheet;    NSString            *sheetName, *spriteName;    NSMutableDictionary *tmpl;    NSDictionary        *entityInfo;    NSDictionary        *temp;    NSAutoreleasePool   *pool;    NSString            *path;        pool = [NSAutoreleasePool new];    path = [[NSBundle mainBundle] pathForResource:name ofType:@"plist"];        tmpl       = [NSMutableDictionary dictionary];    entityInfo = [NSDictionary dictionaryWithContentsOfFile:path];    sheetName  = [entityInfo valueForKey:kSWOSpriteParent];    spriteName = [entityInfo valueForKey:kSWOSprite];        if (!(sheet = [_installedSheets valueForKey:sheetName])) {        sheet = [CCSpriteBatchNode batchNodeWithFile:sheetName];                [[CCSpriteFrameCache sharedSpriteFrameCache] addSpriteFramesWithFile:[NSString stringWithFormat:@"%@.plist", sheetName]                                                                     texture:sheet.textureAtlas.texture];        [_layer addChild:sheet];        [_installedSheets setValue:sheet forKey:sheetName];    }    [tmpl setValue:sheet forKey:kSWOSpriteParent];    [tmpl setValue:spriteName forKey:kSWOSprite];        temp = [entityInfo valueForKey:kSWOAnimations];    [tmpl setValue:[self _animationsWithDictionary:temp] forKey:kSWOAnimations];    temp = [entityInfo valueForKey:kSWOSoundEffects];    [tmpl setValue:[self _soundEffectsWithDictionary:temp] forKey:kSWOSoundEffects];    temp = [entityInfo valueForKey:kSWOData];    [tmpl setValue:temp forKey:kSWOData];    [tmpl setValue:name forKey:kSWOTemplateKey];        [_entities setValue:tmpl forKey:name];    [pool drain];}-(NSDictionary *)templateWithName:(NSString *)name {    return [_entities valueForKey:name];}-(NSDictionary *)_soundEffectsWithDictionary:(NSDictionary *)sfxInfo {    NSMutableDictionary *resultInfo;    NSAutoreleasePool   *pool;    NSString            *filePath;        resultInfo = nil;        if (sfxInfo) {        pool       = [NSAutoreleasePool new];        resultInfo = [[NSMutableDictionary dictionary] retain];                for (NSString *key in [sfxInfo allKeys]) {            filePath = [sfxInfo valueForKey:key];            if (![_preloadedSoundEffects containsObject:filePath]) {                [[SimpleAudioEngine sharedEngine] preloadEffect:filePath];                [_preloadedSoundEffects addObject:filePath];            }            [resultInfo setValue:filePath forKey:key];        }                [pool drain];    }        return [resultInfo autorelease];}-(NSDictionary *)_animationsWithDictionary:(NSDictionary *)animInfo {    NSMutableDictionary *resultInfo;    NSAutoreleasePool   *pool;    NSString            *frameName;    CCAnimation         *animation;    CCSpriteFrame       *frame;    NSUInteger          frameCount;    CGFloat             delay;    NSArray             *animArray;    NSString            *sheetName;        resultInfo = nil;    if (animInfo) {        pool       = [NSAutoreleasePool new];        resultInfo = [[NSMutableDictionary dictionary] retain];                for(NSString *key in [animInfo allKeys]) {            animArray  = [animInfo valueForKey:key];            frameCount = [[animArray objectAtIndex:0] integerValue];            delay      = [[animArray objectAtIndex:1] floatValue];            sheetName  = [animArray objectAtIndex:2];            animation  = [CCAnimation animationWithName:key delay:delay];                        if (![_installedSheets valueForKey:sheetName]) {                CCSpriteBatchNode *sheet;                                sheet = [CCSpriteBatchNode batchNodeWithFile:sheetName];                                [[CCSpriteFrameCache sharedSpriteFrameCache] addSpriteFramesWithFile:[NSString stringWithFormat:@"%@.plist", sheetName]                                                                             texture:sheet.textureAtlas.texture];                [_layer addChild:sheet];                [_installedSheets setValue:sheet forKey:sheetName];            }                        for (NSUInteger i=1; i<=frameCount; i++) {                frameName = [NSString stringWithFormat:@"%@_%02d.png", key, i];                frame     = [[CCSpriteFrameCache sharedSpriteFrameCache] spriteFrameByName:frameName];                [animation addFrame:frame];            }            [resultInfo setValue:animation forKey:key];        }                [pool drain];            }    return [resultInfo autorelease];}-(void)_cleanup {    for (NSString *fileName in _preloadedSoundEffects) {        [[SimpleAudioEngine sharedEngine] unloadEffect:fileName];    }}-(void)dealloc {    [self _cleanup];    [_installedSheets       release];    [_preloadedSoundEffects release];    [_entities              release];    [super dealloc];}@end