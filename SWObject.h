////  SWObject.h//  SWGameLib//////  Copyright (c) 2010 Sangwoo Im////  Permission is hereby granted, free of charge, to any person obtaining a copy//  of this software and associated documentation files (the "Software"), to deal//  in the Software without restriction, including without limitation the rights//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell//  copies of the Software, and to permit persons to whom the Software is//  furnished to do so, subject to the following conditions:////  The above copyright notice and this permission notice shall be included in//  all copies or substantial portions of the Software.////  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN//  THE SOFTWARE.//  //  Created by Sangwoo Im on 4/13/10.//  Copyright 2010 Sangwoo Im. All rights reserved.//#import "CCNode.h"/** * Base class for all interactive objects that show up in the game. Consider this * object is a bridge between chipmunk and cocos2d spaces. However, this class * implements only cocos2d space. See <code>SWPhysicsObject</code> class. *  */@interface SWObject :          NSObject{@protected    NSDictionary        *_userData;    NSDictionary        *_animInfo;    NSDictionary        *_sfxInfo;    NSMutableDictionary *_animActions;@private    NSString            *_key;    NSUInteger          _objectID;    CCNode              *_sprite;    CCNode              *_spriteParent;    NSInteger           _zOrder;    NSUInteger          _playerIdx;}/** * player index *  * Use this to identify the authority of this object. * Consider 0 is for neutral objects. *  * @remark SWNetworkObjectManager will use 1 and 2 for peers. */@property (nonatomic, assign)           NSUInteger      playerIdx;/** * Object template key. */@property (nonatomic, retain, readonly) NSString *templateKey;/** * initial z order to be used when it's added to a CCNode object. */@property (nonatomic, assign) NSInteger  zOrder;/** * this is used by object manager. do not set this manually. */@property (nonatomic, assign) NSUInteger objectID;/** * Position of the internal sprite object. */@property (nonatomic, assign) CGPoint    position;/** * Rotation value of the internal sprite object. */@property (nonatomic, assign) CGFloat    rotation;/** * the sprite object. A CCNode. Not necessarily a CCSprite instance. */@property (nonatomic, retain) CCNode     *sprite;/** * weak link to the sprite sheet, this doesn't has to be a sprite sheet instance * as long as it is the parent of sprite. */ @property (nonatomic, retain) CCNode     *spriteParent;/** * Currently cached animation actions */@property (nonatomic, retain, readonly) NSDictionary *animActions;/** * Returns SWObject, instantiated by the given template dictionary. * * @remark The template should be loaded by a SWObjectTemplates instance. * @param info The template to instantiate this object. * @return self */+(id)objectWithTemplate:(NSDictionary *)info;/** * Returns SWObject, instantiated by the given template dictionary. * * @remark The template should be loaded by a SWObjectTemplates instance. * @param info The template to instantiate this object. * @return self */-(id)initWithTemplate:(NSDictionary *)info;/** * Make this object appear on the screen. */-(void)spawn;/** * Make this object disappear on the screen. */-(void)despawn;/** * Updates visual state of this object. */-(void)update;/** * Returns data value object that is initially loaded from SWObjectTemplate with * with a given key. * * @param key to search the value. * @return the data value assigned to the given key. */-(id)dataValueForKey:(NSString *)key;/** * Plays an animation by a given key only once *  * @param key the key registered with object template */-(void)playAnimation:(NSString *)key;/** * Plays an animation by a given key, repeating it with a given repetition count. *  * @param key the key registered with object template * @param repeat the number of repetition. 0 will make the animation run forever. */-(void)playAnimation:(NSString *)key repeat:(NSInteger)repeat;/** * Stop an animation by a given key. * * @param key the key registered with object template */-(void)stopAnimation:(NSString *)key;/** * Play a sound effect by a given key * * @param key the key registered with object template */-(void)playSFX:(NSString *)key;@end