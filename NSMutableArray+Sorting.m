////  NSMutableArraySorting.m//  SWGameLib//////  Copyright (c) 2010 Sangwoo Im////  Permission is hereby granted, free of charge, to any person obtaining a copy//  of this software and associated documentation files (the "Software"), to deal//  in the Software without restriction, including without limitation the rights//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell//  copies of the Software, and to permit persons to whom the Software is//  furnished to do so, subject to the following conditions:////  The above copyright notice and this permission notice shall be included in//  all copies or substantial portions of the Software.////  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN//  THE SOFTWARE.//  //  Created by Sangwoo Im on 10/10/09.//  Copyright 2009 Sangwoo Im. All rights reserved.//#import "NSMutableArray+Sorting.h"#import "SWObject.h"#import "SWTableViewCell.h"#import "SWDebug.h"CFComparisonResult _compareObject(const void *val1, const void *val2, void *context) {        id operand1, operand2;        operand1 = (id)val1;    operand2 = (id)val2;        return [operand1 compare:operand2];}#pragma mark -@implementation NSMutableArray (Sorting)- (void)insertSortedObject:(SWObject *)object {    CFIndex idx;        idx = [self indexOfSortedObject:object];        [self insertObject:object atIndex:idx];}- (void)removeSortedObject:(SWObject *)object {    if ([self count] == 0) {        SWLog(@"%s: Warning: attempted to remove an object from empty array", __FUNCTION__);        return;    }    CFIndex  idx;    SWObject *foundObj;    idx = [self indexOfObject:object];        if (idx < [self count] && idx >= 0) {        foundObj = [self objectAtIndex:idx];                if(foundObj.objectID == object.objectID) {            [self removeObjectAtIndex:idx];        } else {            SWLog(@"%s: Warning: No object found", __FUNCTION__);         }    }}- (void)setObjectID:(NSUInteger)tag ofSortedObject:(SWObject *)object {    SWObject *foundObj;    CFIndex  idx;        idx = [self indexOfSortedObject:object];    if (idx < [self count] && idx >= 0) {        foundObj = [[self objectAtIndex:idx] retain];                if(foundObj.objectID == object.objectID) {            [self removeObjectAtIndex:idx];            foundObj.objectID = tag;            [self insertSortedObject:foundObj];            [foundObj release];        } else {            [foundObj release];            SWLog(@"%s: Warning: No object found", __FUNCTION__);         }    }}- (SWObject *)objectWithObjectID:(NSUInteger)tag {    if ([self count] == 0) {        return nil;    }        CFIndex  idx;    SWObject *foundObj;        foundObj = [[SWObject alloc] initWithTemplate:nil];    foundObj.objectID = tag;        idx      = [self indexOfSortedObject:foundObj];        [foundObj release];    foundObj = nil;        if (idx < [self count] && idx >= 0) {        foundObj = [self objectAtIndex:idx];        if (foundObj.objectID != tag) {            foundObj = nil;        }    }        return foundObj;}- (CFIndex)indexOfSortedObject:(SWObject *)object {    CFIndex  idx;    idx = CFArrayBSearchValues((CFArrayRef)self, CFRangeMake(0, [self count]),                                (void *)object, &_compareObject, NULL);    return idx;}@end#pragma mark -@implementation NSMutableArray (SWTableViewCellSorting)- (void)insertSortedCell:(SWTableViewCell *)object {    CFIndex idx;        idx = [self indexOfSortedCell:object];        [self insertObject:object atIndex:idx];}- (void)removeSortedCell:(SWTableViewCell *)object {    if ([self count] == 0) {        SWLog(@"%s: Warning: attempted to remove an object from empty array", __FUNCTION__);        return;    }    CFIndex  idx;    SWTableViewCell *foundObj;    idx = [self indexOfObject:object];        if (idx < [self count] && idx >= 0) {        foundObj = [self objectAtIndex:idx];                if(foundObj.idx == object.idx) {            [self removeObjectAtIndex:idx];        } else {            SWLog(@"%s: Warning: No object found", __FUNCTION__);         }    }}- (void)setIdx:(NSUInteger)tag ofSortedCell:(SWTableViewCell *)object {    SWTableViewCell *foundObj;    CFIndex  idx;        idx = [self indexOfSortedCell:object];    if (idx < [self count] && idx >= 0) {        foundObj = [[self objectAtIndex:idx] retain];                if(foundObj.idx == object.idx) {            [self removeObjectAtIndex:idx];            foundObj.idx = tag;            [self insertSortedCell:foundObj];            [foundObj release];        } else {            [foundObj release];            SWLog(@"%s: Warning: No object found", __FUNCTION__);         }    }}- (SWTableViewCell *)cellWithIdx:(NSUInteger)tag {    if ([self count] == 0) {        return nil;    }        CFIndex  idx;    SWTableViewCell *foundObj;        foundObj = [[SWTableViewCell alloc] init];    foundObj.idx = tag;        idx      = [self indexOfSortedCell:foundObj];        [foundObj release];    foundObj = nil;        if (idx < [self count] && idx >= 0) {        foundObj = [self objectAtIndex:idx];        if (foundObj.idx != tag) {            foundObj = nil;        }    }        return foundObj;}- (CFIndex)indexOfSortedCell:(SWTableViewCell *)object {    CFIndex  idx;    idx = CFArrayBSearchValues((CFArrayRef)self, CFRangeMake(0, [self count]),                               (void *)object, &_compareObject, NULL);    return idx;}@end