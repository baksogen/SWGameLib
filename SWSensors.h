////  ProximitySensor.h//  SWGameLib//////  Copyright (c) 2010 Sangwoo Im////  Permission is hereby granted, free of charge, to any person obtaining a copy//  of this software and associated documentation files (the "Software"), to deal//  in the Software without restriction, including without limitation the rights//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell//  copies of the Software, and to permit persons to whom the Software is//  furnished to do so, subject to the following conditions:////  The above copyright notice and this permission notice shall be included in//  all copies or substantial portions of the Software.////  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN//  THE SOFTWARE.//  //  Created by Sangwoo Im on 9/1/10.//  Copyright 2010 Sangwoo Im. All rights reserved.//#import <Foundation/Foundation.h>#import "SWCircle.h"#import "SWRectangle.h"@class SWCircleSensor, SWPhysicsObject;/** * Delegate to respond when an object enters or leaves * sensor range. */@protocol SWProximitySensorDelegate<          NSObject>@required/** * Invoked when an object entered the sensor range. *  * @param sensor the sensor that detected the given object. * @param obj the object, entered the sensor range. */-(void)sensor:(id)sensor foundObject:(SWPhysicsObject *)obj;@optional/** * Invoked when an object left the sensor range. * * @param sensor the sensor that detected the given object. * @param obj the object, left the sensor range. */-(void)sensor:(id)sensor lostObject:(SWPhysicsObject *)obj;@end/** * Circle type sensor to detect surrounding. */@interface SWCircleSensor : SWCircle {    NSTimeInterval _contactTime;}/** * the latest contact time when sensor:foundObject: is invoked. */@property (nonatomic, assign, readonly) NSTimeInterval lastContactTime;@end/** * Box type sensor to detect only one side. */@interface SWBoxSensor : SWRectangle {    NSTimeInterval _contactTime;}/** * the latest contact time when sensor:foundObject: is invoked. */@property (nonatomic, assign, readonly) NSTimeInterval lastContactTime;@end