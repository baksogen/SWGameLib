////  SWPacket.h//  SWGameLib////  Copyright (c) 2010 Sangwoo Im////  Permission is hereby granted, free of charge, to any person obtaining a copy//  of this software and associated documentation files (the "Software"), to deal//  in the Software without restriction, including without limitation the rights//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell//  copies of the Software, and to permit persons to whom the Software is//  furnished to do so, subject to the following conditions:////  The above copyright notice and this permission notice shall be included in//  all copies or substantial portions of the Software.////  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN//  THE SOFTWARE.//  ////  Created by Sangwoo Im on 9/27/10.//  Copyright 2010 Sangwoo Im. All rights reserved.//#import <Foundation/Foundation.h>#import "SWMessage.h"/** * Application-level packet. This is high level packet interface to  * convert from/to NSData object to be sent by AsyncSocket objects. *  * This packet type is meant to used by TCP connection. * A variable length is allowed. data is not time critical, but transactional * assurance is required for it; for example, trading items between players. * achievement updates, an initial game setup that requires a confirmation for * all players, etc. * * The common approach to process the packets is as the following:  *  * Receive: * Check length data, read to the end of the packet. * Instantiate this class with the retrieved data. Convert NSData to a proper type. * * Send: * use packet selector. send via AsyncSocket. * * This class is mainly used by SWNetworkObjectManager to synchronize SWEvent * notifications to a remote device.  *  */@interface SWPacket :          NSObject {@protected    NetMessageType _type;    NSData         *_userData;}/** * length of the data contained by this packet. */@property (nonatomic, assign, readonly) NSUInteger     length;/** * Message type. consider this as a high level message header to distinguish * different packets. */@property (nonatomic, assign)           NetMessageType type;/** * Initialize this packet object with a given data object. * * @param data to initialize * @return the initialized packet instance. */-(id)initWithData:(NSData *)data;/** * NSData object * * @return properly formatted, send-ready packet data. */-(NSData *)packet;@end/** * Network packet to deliver string along with type defined in SWPacket. * * This class demonstrates how to extend NetPacket class. Also, it can be used * for challenge request where the current device name needs to be transferred * to the opponent's device. */@interface SWPacketString : SWPacket {    }/** * String user data */@property (nonatomic, copy) NSString *string;@end/** * Network packet to deliver object despawn info. */@interface SWPacketObjectDespawn : SWPacket {    }/** * integer user data */@property (nonatomic, assign) NSUInteger objectID;@end/** * Network packet to deliver object spawn info */@interface SWPacketObjectSpawn: SWPacket {    NSUInteger _objectID;    CGPoint    _position;}/** * object id */@property (nonatomic, assign) NSUInteger objectID;/** * template key */@property (nonatomic, retain) NSString   *templateKey;/** * position */@property (nonatomic, assign) CGPoint    position;@end