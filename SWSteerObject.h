////  SWSteerObject.h//  SWGameLib////  The algorithm and its theories can be found at:////  http://www.red3d.com/cwr/steer/gdc99/////  This implementation is a port of small subset of what's described in the web page.//  Also, a part of this is ported from OpenSteer Library.////  OpenSteer library license can be found at: http://opensteer.sourceforge.net///////  Copyright (c) 2010 Sangwoo Im////  Permission is hereby granted, free of charge, to any person obtaining a copy//  of this software and associated documentation files (the "Software"), to deal//  in the Software without restriction, including without limitation the rights//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell//  copies of the Software, and to permit persons to whom the Software is//  furnished to do so, subject to the following conditions:////  The above copyright notice and this permission notice shall be included in//  all copies or substantial portions of the Software.////  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN//  THE SOFTWARE.//  //  Created by Sangwoo Im on 9/17/10.//  Copyright 2010 Sangwoo Im. All rights reserved.//#import <Foundation/Foundation.h>#import "SWPhysicsObject.h"#import "SWSensors.h"#import "chipmunk.h"#import "SWSensors.h"#define SLOWING_DISTANCE 100.0f@class SWSteerObject;/** * Object states */typedef enum {    SteerInactive   = 1,    SteerSeek       = SteerInactive << 1,    SteerPursuit    = SteerInactive << 2,    SteerArrival    = SteerInactive << 3,    SteerSeparation = SteerInactive << 4,    SteerWander     = SteerInactive << 5,    SteerFlee       = SteerInactive << 6,    SteerEvasion    = SteerInactive << 7,    SteerAvoidance  = SteerInactive << 8,    SteerAllStates  = 0xFFFF} SWSteerObjectStates;/** * It extends SWPhysicsObject to employ steering movements defined in  * aforementioned web page.  */@interface SWSteerObject :          SWPhysicsObject<           SWProximitySensorDelegate> {@protected    CGFloat                   _f; //forwardness    CGFloat                   _p; //parallelness    SWCircleSensor            *_steerSensor;    SWCircleSensor            *_obstacleSensor;    CGPoint                   _target;    BOOL                      _autorotation;    SWPhysicsObject           *_targetObj;    CGFloat                   _steerRate;@private    CGPoint                   _wv, _w;    SWSteerObjectStates       _states;    NSMutableArray            *_nearByObjects;    NSMutableArray            *_obstacles;}/** * Target point used in seek, flee movements. They cannot be active at the same * time. */@property (nonatomic, assign, readonly) CGPoint                   target;/** * The current steering states. */@property (nonatomic, assign, readonly) SWSteerObjectStates       states;-(void)arrival:(CGPoint)p;-(void)stopArrival;-(void)seek:(CGPoint)p;-(void)stopSeek;-(void)flee:(CGPoint)p;-(void)stopFlee;-(void)pursuit:(SWPhysicsObject *)obj;-(void)stopPursuit;-(void)evade:(SWPhysicsObject *)obj;-(void)stopEvade;-(void)separateFromObjectsWithLayers:(cpLayers)layers type:(cpCollisionType)type;-(void)stopSeparation;-(void)avoidObtaclesInLayers:(cpLayers)layers type:(cpCollisionType)type;-(void)stopAvoidance;-(void)wander:(CGPoint)p;-(void)stopWander;-(void)start;-(void)stop;@end