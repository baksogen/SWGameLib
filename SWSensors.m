////  ProximitySensor.m//  SWGameLib//////  Copyright (c) 2010 Sangwoo Im////  Permission is hereby granted, free of charge, to any person obtaining a copy//  of this software and associated documentation files (the "Software"), to deal//  in the Software without restriction, including without limitation the rights//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell//  copies of the Software, and to permit persons to whom the Software is//  furnished to do so, subject to the following conditions:////  The above copyright notice and this permission notice shall be included in//  all copies or substantial portions of the Software.////  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN//  THE SOFTWARE.//  //  Created by Sangwoo Im on 9/1/10.//  Copyright 2010 Sangwoo Im. All rights reserved.//#import "SWSensors.h"#import "SWPhysicsObject.h"@implementation SWCircleSensor@synthesize lastContactTime = _contactTime;#pragma mark -#pragma mark Collisions-(BOOL)beginCollisionWithPoint:(CGPoint)p object:(SWPhysicsObject *)obj {    id <SWProximitySensorDelegate> delegate;        _contactTime      = [[NSDate date] timeIntervalSince1970];    _lastContactPoint = p;    delegate          = (id <SWProximitySensorDelegate>)self.parent;    [delegate sensor:self foundObject:obj];    return NO;}-(BOOL)afterEffectsExist:(SWPhysicsObject *)obj {    return NO;}-(void)endCollisionWithObject:(SWPhysicsObject *)obj {    id <SWProximitySensorDelegate> delegate;        delegate          = (id <SWProximitySensorDelegate>)self.parent;    if ([delegate respondsToSelector:@selector(sensor:lostObject:)]) {        [delegate sensor:self lostObject:obj];    }}@end@implementation SWBoxSensor@synthesize lastContactTime = _contactTime;#pragma mark -#pragma mark Collisions-(BOOL)beginCollisionWithPoint:(CGPoint)p object:(SWPhysicsObject *)obj {    id <SWProximitySensorDelegate> delegate;        _contactTime      = [[NSDate date] timeIntervalSince1970];    _lastContactPoint = p;    delegate          = (id <SWProximitySensorDelegate>)self.parent;    [delegate sensor:self foundObject:obj];    return NO;}-(BOOL)afterEffectsExist:(SWPhysicsObject *)obj {    return NO;}-(void)endCollisionWithObject:(SWPhysicsObject *)obj {    id <SWProximitySensorDelegate> delegate;        delegate          = (id <SWProximitySensorDelegate>)self.parent;    if ([delegate respondsToSelector:@selector(sensor:lostObject:)]) {        [delegate sensor:self lostObject:obj];    }}@end