////  SWObjectTemplates.h//  SWGameLib//////  Copyright (c) 2010 Sangwoo Im////  Permission is hereby granted, free of charge, to any person obtaining a copy//  of this software and associated documentation files (the "Software"), to deal//  in the Software without restriction, including without limitation the rights//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell//  copies of the Software, and to permit persons to whom the Software is//  furnished to do so, subject to the following conditions:////  The above copyright notice and this permission notice shall be included in//  all copies or substantial portions of the Software.////  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN//  THE SOFTWARE.////  Created by Sangwoo Im on 4/13/10.//  Copyright 2010 Sangwoo Im. All rights reserved.//#import <Foundation/Foundation.h>@class SWObject, CCLayer;/** * This class loads property lists into memory. The lists are considered as * game object database.  *  * You can find this class useful for the following advantages: * * 1. You can create game object with a name.   * * In the simplest form, you can show an object into a scene as the following * example: * * SWPhysicsObject        *obj; * SWDefaultObjectManager *theManager; * SWObjectTemplates      *templates; *  * obj = [SWObject objectWithTemplate:[templates templateWithName:@"object1"]]; * obj.spawnManager = theManager; * [obj spawn]; * * 2. Level designers can adjusts all object properties  via * the property lists without accessing your game logic codes. * * 3. It will try to preload sound effects and install sprite batch node (a.k.a sprite sheet) *    and animations for you. You can simply use methods available in SWObject.h *  * You must use this class in case that you plan to use SWNetworkObjectManager. */@interface SWObjectTemplates :          NSObject {@private    CCLayer             *_layer;    NSMutableArray      *_preloadedSoundEffects;    NSMutableDictionary *_installedSheets;    NSMutableDictionary *_entities;}/** * Returns auto-released template object * * @param layer CCLayer object to install spritesheets. * @return template object */+(id)templateWithLayer:(CCLayer *)layer;/** * Returns template object * * @param layer CCLayer object to install spritesheets. * @return template object */-(id)initWithLayer:(CCLayer *)layer;/** * Load object template which is plist file into memory and constructs  * template dictionary which will be used by SWObject class to instantiate. * * Object templates contain object meta-data, animation objects, and spritesheet * which is already installed. * * @param name filename of object teplate (plist) without its file extension. */-(void)loadTemplateWithName:(NSString *)name;/** * Returns an object template withe a given name * @param key to find object template * @return object template dictionary  */-(NSDictionary *)templateWithName:(NSString *)name;@end