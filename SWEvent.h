////  SWEvent.h//  SWGameLib//////  Copyright (c) 2010 Sangwoo Im////  Permission is hereby granted, free of charge, to any person obtaining a copy//  of this software and associated documentation files (the "Software"), to deal//  in the Software without restriction, including without limitation the rights//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell//  copies of the Software, and to permit persons to whom the Software is//  furnished to do so, subject to the following conditions:////  The above copyright notice and this permission notice shall be included in//  all copies or substantial portions of the Software.////  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN//  THE SOFTWARE.//  //  Created by Sangwoo Im on 9/27/10.//  Copyright 2010 Sangwoo Im. All rights reserved.//#import <Foundation/Foundation.h>/** * Delegate to detect an event. */@protocol SWEventCheckerDelegate<          NSObject>/** * Returns YES if an event should be triggered. */-(BOOL)eventShouldHappen;@end/** * Delegate to respond to the event */@protocol SWEventHandlerDelegate<          NSObject>/** * Process any event aftereffects. */-(void)handleEvent;@end/** * An event model to keep track of game events. * You can plug in and out from/to SWDefaultObjectManager instance. */@interface SWEvent : NSObject {    BOOL                       _enabled;    id<SWEventHandlerDelegate> _handler;    id<SWEventCheckerDelegate> _checker;}/** * If YES, the event is processed normally. If NO, the event is ignored. */@property (nonatomic, assign) BOOL                       enabled;/** * Handles an event  */@property (nonatomic, assign) id<SWEventHandlerDelegate> handler;/** * Checks if the event's precondition is met. */@property (nonatomic, assign) id<SWEventCheckerDelegate> checker;/** * Processes the event, both checking and aftereffects. This is meant * to be called by SWDefaultObjectManager instance. The result of manual calls to * this method is undefined. */-(void)update;@end