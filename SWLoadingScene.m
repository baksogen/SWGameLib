////  SWLoadingScene.m//  SWGameLib//////  Copyright (c) 2010 Sangwoo Im////  Permission is hereby granted, free of charge, to any person obtaining a copy//  of this software and associated documentation files (the "Software"), to deal//  in the Software without restriction, including without limitation the rights//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell//  copies of the Software, and to permit persons to whom the Software is//  furnished to do so, subject to the following conditions:////  The above copyright notice and this permission notice shall be included in//  all copies or substantial portions of the Software.////  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN//  THE SOFTWARE.//  //  Created by Sangwoo Im on 4/14/10.//  Copyright 2010 Sangwoo Im. All rights reserved.//#import "SWLoadingScene.h"#import "CCScene.h"#import "CCProgressTimer.h"#import "CCSprite.h"#import "SWGameLib.h"#import "CCLayer.h"#import "CCDirector.h"#import "CCActionProgressTimer.h"@interface SWLoadingScene()-(void)finishLoading;@end@implementation SWLoadingScene@synthesize scene = _scene;@synthesize timer = _pBar;@synthesize sceneToLoad = _sceneToLoad;+(id)sceneWithClassInfo:(NSDictionary *)info {    CCScene *scene;    CCNode  *node;        scene = [CCScene node];    node  = [[self alloc] initWithClassInfo:info];    [scene addChild:node];    [node release];    return scene;}-(id)initWithClassInfo:(NSDictionary *)info {    if ((self = [super init])) {                _opQueue = [NSOperationQueue new];        [_opQueue setSuspended:YES];        [_opQueue setMaxConcurrentOperationCount:1];                _info          = [info retain];        _loadingScreen = [_info valueForKey:SWLoadBG];        _pBar          = [_info valueForKey:SWLoadTimer];        _sceneToLoad   = [_info valueForKey:SWLoadClass];                SWAssert([_sceneToLoad conformsToProtocol:@protocol(SWLoadableScene)], @"The class must conform to SWLoadableScene");                if (_loadingScreen) {            [self addChild:_loadingScreen];        }        if (_pBar) {            [self addChild:_pBar];        }    }    return self;}-(NSOperationQueue *)opQueue {    return _opQueue;}-(void)onEnter {    [super onEnter];        NSDictionary *data;        data   = [[NSDictionary alloc] initWithObjectsAndKeys:self, SWLoader, [_info valueForKey:SWLoadData], SWLoadData, nil];    _scene = [[_sceneToLoad performSelector:@selector(sceneWithUserInfo:) withObject:data] retain];    _total = [[_opQueue operations] count];        _completed       = 0;    _pBar.percentage = 0.0f;    [_opQueue setSuspended:NO];        [data release];}-(void)finishLoading {    [[CCDirector sharedDirector] replaceScene:_scene];}-(void)updateProgress {    _completed = _total - [[_opQueue operations] count];        [_pBar stopAllActions];    [_pBar runAction:[CCProgressTo actionWithDuration:0.25f percent:(((CGFloat)_completed)/_total)]];    if (_completed >= _total) {        [self finishLoading];    }}-(void)dealloc {    [_info          release];    [_opQueue       release];    [_scene         release];    [super dealloc];    METHOD_EXIT();}@end